name: 'Build and Deploy Next.js App to Azure'

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 'Checkout Github Action'
        uses: actions/checkout@v4

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      # 完全クリーンビルド
      - name: 'Force clean all caches'
        run: |
          echo "Removing all build artifacts..."
          rm -rf .next
          rm -rf node_modules
          rm -rf release
          echo "Clean complete."

      - name: 'Install dependencies'
        run: npm ci

      # ビルド（環境変数を明示的に設定）
      - name: 'Build the application'
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NODE_ENV: production
        run: |
          echo "=========================================="
          echo "Building with API URL: ${NEXT_PUBLIC_API_URL}"
          echo "=========================================="
          npm run build

      # デプロイパッケージの準備（修正版）
      - name: 'Prepare deployment package'
        run: |
          echo "Creating deployment package..."
          mkdir -p release
          
          # standalone の内容をコピー
          if [ -d .next/standalone ]; then
            echo "Copying standalone files..."
            cp -r .next/standalone/. release/
            
            # public フォルダをコピー
            if [ -d public ]; then
              echo "Copying public folder..."
              mkdir -p release/public
              cp -r public/. release/public/
            fi
            
            # static フォルダをコピー
            if [ -d .next/static ]; then
              echo "Copying static folder..."
              mkdir -p release/.next/static
              cp -r .next/static/. release/.next/static/
            fi
            
            echo "✓ Deployment package created successfully"
            echo "Contents of release folder:"
            ls -la release/
            echo "Checking for server.js:"
            ls -la release/server.js || echo "❌ server.js not found!"
          else
            echo "✗ ERROR: .next/standalone directory not found!"
            exit 1
          fi

      # 診断: server.js の確認
      - name: '🔍 Verify server.js exists'
        run: |
          if [ -f release/server.js ]; then
            echo "✅ server.js found in release folder"
            echo "First 20 lines of server.js:"
            head -20 release/server.js
          else
            echo "❌ CRITICAL: server.js NOT found in release folder!"
            echo "Contents of release:"
            find release -type f
            exit 1
          fi

      - name: 'Upload artifact for deployment job'
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: ./release

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: 'Download artifact from build job'
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: ./release
      
      - name: '🔍 Verify downloaded artifact'
        run: |
          echo "Contents of downloaded artifact:"
          ls -la ./release/
          if [ -f ./release/server.js ]; then
            echo "✅ server.js present in artifact"
          else
            echo "❌ server.js missing in artifact!"
            exit 1
          fi
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-1-node-oshima42'
          package: ./release
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          clean: true
          
      - name: '✅ Deployment complete'
        run: |
          echo "=========================================="
          echo "Deployment completed!"
          echo "App URL: ${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          echo "Wait 2-3 minutes for the app to start..."
          echo "=========================================="
